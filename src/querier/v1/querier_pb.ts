// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file querier/v1/querier.proto (package querier.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Labels, ProfileType, Series, StackTraceSelector, TimeSeriesAggregationType } from "../../types/v1/types_pb.js";

/**
 * @generated from enum querier.v1.ProfileFormat
 */
export enum ProfileFormat {
  /**
   * @generated from enum value: PROFILE_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROFILE_FORMAT_FLAMEGRAPH = 1;
   */
  FLAMEGRAPH = 1,

  /**
   * @generated from enum value: PROFILE_FORMAT_TREE = 2;
   */
  TREE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ProfileFormat)
proto3.util.setEnumType(ProfileFormat, "querier.v1.ProfileFormat", [
  { no: 0, name: "PROFILE_FORMAT_UNSPECIFIED" },
  { no: 1, name: "PROFILE_FORMAT_FLAMEGRAPH" },
  { no: 2, name: "PROFILE_FORMAT_TREE" },
]);

/**
 * @generated from message querier.v1.ProfileTypesRequest
 */
export class ProfileTypesRequest extends Message<ProfileTypesRequest> {
  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 end = 2;
   */
  end = protoInt64.zero;

  constructor(data?: PartialMessage<ProfileTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.ProfileTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileTypesRequest | PlainMessage<ProfileTypesRequest> | undefined, b: ProfileTypesRequest | PlainMessage<ProfileTypesRequest> | undefined): boolean {
    return proto3.util.equals(ProfileTypesRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.ProfileTypesResponse
 */
export class ProfileTypesResponse extends Message<ProfileTypesResponse> {
  /**
   * @generated from field: repeated types.v1.ProfileType profile_types = 1;
   */
  profileTypes: ProfileType[] = [];

  constructor(data?: PartialMessage<ProfileTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.ProfileTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_types", kind: "message", T: ProfileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileTypesResponse | PlainMessage<ProfileTypesResponse> | undefined, b: ProfileTypesResponse | PlainMessage<ProfileTypesResponse> | undefined): boolean {
    return proto3.util.equals(ProfileTypesResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.SeriesRequest
 */
export class SeriesRequest extends Message<SeriesRequest> {
  /**
   * @generated from field: repeated string matchers = 1;
   */
  matchers: string[] = [];

  /**
   * @generated from field: repeated string label_names = 2;
   */
  labelNames: string[] = [];

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 start = 3;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 end = 4;
   */
  end = protoInt64.zero;

  constructor(data?: PartialMessage<SeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "label_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesRequest {
    return new SeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesRequest {
    return new SeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesRequest {
    return new SeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesRequest | PlainMessage<SeriesRequest> | undefined, b: SeriesRequest | PlainMessage<SeriesRequest> | undefined): boolean {
    return proto3.util.equals(SeriesRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.SeriesResponse
 */
export class SeriesResponse extends Message<SeriesResponse> {
  /**
   * @generated from field: repeated types.v1.Labels labels_set = 2;
   */
  labelsSet: Labels[] = [];

  constructor(data?: PartialMessage<SeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "labels_set", kind: "message", T: Labels, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesResponse {
    return new SeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesResponse {
    return new SeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesResponse {
    return new SeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesResponse | PlainMessage<SeriesResponse> | undefined, b: SeriesResponse | PlainMessage<SeriesResponse> | undefined): boolean {
    return proto3.util.equals(SeriesResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectMergeStacktracesRequest
 */
export class SelectMergeStacktracesRequest extends Message<SelectMergeStacktracesRequest> {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID = "";

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector = "";

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end = protoInt64.zero;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 5;
   */
  maxNodes?: bigint;

  /**
   * Profile format specifies the format of profile to be returned.
   * If not specified, the profile will be returned in flame graph format.
   *
   * @generated from field: querier.v1.ProfileFormat format = 6;
   */
  format = ProfileFormat.UNSPECIFIED;

  constructor(data?: PartialMessage<SelectMergeStacktracesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectMergeStacktracesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_typeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "max_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "format", kind: "enum", T: proto3.getEnumType(ProfileFormat) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectMergeStacktracesRequest {
    return new SelectMergeStacktracesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectMergeStacktracesRequest {
    return new SelectMergeStacktracesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectMergeStacktracesRequest {
    return new SelectMergeStacktracesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SelectMergeStacktracesRequest | PlainMessage<SelectMergeStacktracesRequest> | undefined, b: SelectMergeStacktracesRequest | PlainMessage<SelectMergeStacktracesRequest> | undefined): boolean {
    return proto3.util.equals(SelectMergeStacktracesRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectMergeStacktracesResponse
 */
export class SelectMergeStacktracesResponse extends Message<SelectMergeStacktracesResponse> {
  /**
   * @generated from field: querier.v1.FlameGraph flamegraph = 1;
   */
  flamegraph?: FlameGraph;

  /**
   * Pyroscope tree bytes.
   *
   * @generated from field: bytes tree = 2;
   */
  tree = new Uint8Array(0);

  constructor(data?: PartialMessage<SelectMergeStacktracesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectMergeStacktracesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flamegraph", kind: "message", T: FlameGraph },
    { no: 2, name: "tree", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectMergeStacktracesResponse {
    return new SelectMergeStacktracesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectMergeStacktracesResponse {
    return new SelectMergeStacktracesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectMergeStacktracesResponse {
    return new SelectMergeStacktracesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SelectMergeStacktracesResponse | PlainMessage<SelectMergeStacktracesResponse> | undefined, b: SelectMergeStacktracesResponse | PlainMessage<SelectMergeStacktracesResponse> | undefined): boolean {
    return proto3.util.equals(SelectMergeStacktracesResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectMergeSpanProfileRequest
 */
export class SelectMergeSpanProfileRequest extends Message<SelectMergeSpanProfileRequest> {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID = "";

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector = "";

  /**
   * @generated from field: repeated string span_selector = 3;
   */
  spanSelector: string[] = [];

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 4;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 5;
   */
  end = protoInt64.zero;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 6;
   */
  maxNodes?: bigint;

  /**
   * Profile format specifies the format of profile to be returned.
   * If not specified, the profile will be returned in flame graph format.
   *
   * @generated from field: querier.v1.ProfileFormat format = 7;
   */
  format = ProfileFormat.UNSPECIFIED;

  constructor(data?: PartialMessage<SelectMergeSpanProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectMergeSpanProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_typeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "span_selector", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "max_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 7, name: "format", kind: "enum", T: proto3.getEnumType(ProfileFormat) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectMergeSpanProfileRequest {
    return new SelectMergeSpanProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectMergeSpanProfileRequest {
    return new SelectMergeSpanProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectMergeSpanProfileRequest {
    return new SelectMergeSpanProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SelectMergeSpanProfileRequest | PlainMessage<SelectMergeSpanProfileRequest> | undefined, b: SelectMergeSpanProfileRequest | PlainMessage<SelectMergeSpanProfileRequest> | undefined): boolean {
    return proto3.util.equals(SelectMergeSpanProfileRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectMergeSpanProfileResponse
 */
export class SelectMergeSpanProfileResponse extends Message<SelectMergeSpanProfileResponse> {
  /**
   * @generated from field: querier.v1.FlameGraph flamegraph = 1;
   */
  flamegraph?: FlameGraph;

  /**
   * Pyroscope tree bytes.
   *
   * @generated from field: bytes tree = 2;
   */
  tree = new Uint8Array(0);

  constructor(data?: PartialMessage<SelectMergeSpanProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectMergeSpanProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flamegraph", kind: "message", T: FlameGraph },
    { no: 2, name: "tree", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectMergeSpanProfileResponse {
    return new SelectMergeSpanProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectMergeSpanProfileResponse {
    return new SelectMergeSpanProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectMergeSpanProfileResponse {
    return new SelectMergeSpanProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SelectMergeSpanProfileResponse | PlainMessage<SelectMergeSpanProfileResponse> | undefined, b: SelectMergeSpanProfileResponse | PlainMessage<SelectMergeSpanProfileResponse> | undefined): boolean {
    return proto3.util.equals(SelectMergeSpanProfileResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.DiffRequest
 */
export class DiffRequest extends Message<DiffRequest> {
  /**
   * @generated from field: querier.v1.SelectMergeStacktracesRequest left = 1;
   */
  left?: SelectMergeStacktracesRequest;

  /**
   * @generated from field: querier.v1.SelectMergeStacktracesRequest right = 2;
   */
  right?: SelectMergeStacktracesRequest;

  constructor(data?: PartialMessage<DiffRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.DiffRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left", kind: "message", T: SelectMergeStacktracesRequest },
    { no: 2, name: "right", kind: "message", T: SelectMergeStacktracesRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffRequest {
    return new DiffRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffRequest {
    return new DiffRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffRequest {
    return new DiffRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiffRequest | PlainMessage<DiffRequest> | undefined, b: DiffRequest | PlainMessage<DiffRequest> | undefined): boolean {
    return proto3.util.equals(DiffRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.DiffResponse
 */
export class DiffResponse extends Message<DiffResponse> {
  /**
   * @generated from field: querier.v1.FlameGraphDiff flamegraph = 1;
   */
  flamegraph?: FlameGraphDiff;

  constructor(data?: PartialMessage<DiffResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.DiffResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flamegraph", kind: "message", T: FlameGraphDiff },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffResponse {
    return new DiffResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffResponse {
    return new DiffResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffResponse {
    return new DiffResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DiffResponse | PlainMessage<DiffResponse> | undefined, b: DiffResponse | PlainMessage<DiffResponse> | undefined): boolean {
    return proto3.util.equals(DiffResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.FlameGraph
 */
export class FlameGraph extends Message<FlameGraph> {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[] = [];

  /**
   * @generated from field: repeated querier.v1.Level levels = 2;
   */
  levels: Level[] = [];

  /**
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * @generated from field: int64 max_self = 4;
   */
  maxSelf = protoInt64.zero;

  constructor(data?: PartialMessage<FlameGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.FlameGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "levels", kind: "message", T: Level, repeated: true },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "max_self", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlameGraph {
    return new FlameGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlameGraph {
    return new FlameGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlameGraph {
    return new FlameGraph().fromJsonString(jsonString, options);
  }

  static equals(a: FlameGraph | PlainMessage<FlameGraph> | undefined, b: FlameGraph | PlainMessage<FlameGraph> | undefined): boolean {
    return proto3.util.equals(FlameGraph, a, b);
  }
}

/**
 * @generated from message querier.v1.FlameGraphDiff
 */
export class FlameGraphDiff extends Message<FlameGraphDiff> {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[] = [];

  /**
   * @generated from field: repeated querier.v1.Level levels = 2;
   */
  levels: Level[] = [];

  /**
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * @generated from field: int64 max_self = 4;
   */
  maxSelf = protoInt64.zero;

  /**
   * @generated from field: int64 leftTicks = 5;
   */
  leftTicks = protoInt64.zero;

  /**
   * @generated from field: int64 rightTicks = 6;
   */
  rightTicks = protoInt64.zero;

  constructor(data?: PartialMessage<FlameGraphDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.FlameGraphDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "levels", kind: "message", T: Level, repeated: true },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "max_self", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "leftTicks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "rightTicks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlameGraphDiff {
    return new FlameGraphDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlameGraphDiff {
    return new FlameGraphDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlameGraphDiff {
    return new FlameGraphDiff().fromJsonString(jsonString, options);
  }

  static equals(a: FlameGraphDiff | PlainMessage<FlameGraphDiff> | undefined, b: FlameGraphDiff | PlainMessage<FlameGraphDiff> | undefined): boolean {
    return proto3.util.equals(FlameGraphDiff, a, b);
  }
}

/**
 * @generated from message querier.v1.Level
 */
export class Level extends Message<Level> {
  /**
   * @generated from field: repeated int64 values = 1;
   */
  values: bigint[] = [];

  constructor(data?: PartialMessage<Level>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.Level";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Level {
    return new Level().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJsonString(jsonString, options);
  }

  static equals(a: Level | PlainMessage<Level> | undefined, b: Level | PlainMessage<Level> | undefined): boolean {
    return proto3.util.equals(Level, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectMergeProfileRequest
 */
export class SelectMergeProfileRequest extends Message<SelectMergeProfileRequest> {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID = "";

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector = "";

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end = protoInt64.zero;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 5;
   */
  maxNodes?: bigint;

  /**
   * Select stack traces that match the provided selector.
   *
   * @generated from field: optional types.v1.StackTraceSelector stack_trace_selector = 6;
   */
  stackTraceSelector?: StackTraceSelector;

  constructor(data?: PartialMessage<SelectMergeProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectMergeProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_typeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "max_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "stack_trace_selector", kind: "message", T: StackTraceSelector, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectMergeProfileRequest {
    return new SelectMergeProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectMergeProfileRequest {
    return new SelectMergeProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectMergeProfileRequest {
    return new SelectMergeProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SelectMergeProfileRequest | PlainMessage<SelectMergeProfileRequest> | undefined, b: SelectMergeProfileRequest | PlainMessage<SelectMergeProfileRequest> | undefined): boolean {
    return proto3.util.equals(SelectMergeProfileRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectSeriesRequest
 */
export class SelectSeriesRequest extends Message<SelectSeriesRequest> {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID = "";

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector = "";

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start = protoInt64.zero;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end = protoInt64.zero;

  /**
   * @generated from field: repeated string group_by = 5;
   */
  groupBy: string[] = [];

  /**
   * @generated from field: double step = 6;
   */
  step = 0;

  /**
   * Query resolution step width in seconds
   *
   * @generated from field: optional types.v1.TimeSeriesAggregationType aggregation = 7;
   */
  aggregation?: TimeSeriesAggregationType;

  /**
   * Select stack traces that match the provided selector.
   *
   * @generated from field: optional types.v1.StackTraceSelector stack_trace_selector = 8;
   */
  stackTraceSelector?: StackTraceSelector;

  /**
   * Select the top N series by total value.
   *
   * @generated from field: optional int64 limit = 9;
   */
  limit?: bigint;

  constructor(data?: PartialMessage<SelectSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_typeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "group_by", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "step", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "aggregation", kind: "enum", T: proto3.getEnumType(TimeSeriesAggregationType), opt: true },
    { no: 8, name: "stack_trace_selector", kind: "message", T: StackTraceSelector, opt: true },
    { no: 9, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectSeriesRequest {
    return new SelectSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectSeriesRequest {
    return new SelectSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectSeriesRequest {
    return new SelectSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SelectSeriesRequest | PlainMessage<SelectSeriesRequest> | undefined, b: SelectSeriesRequest | PlainMessage<SelectSeriesRequest> | undefined): boolean {
    return proto3.util.equals(SelectSeriesRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.SelectSeriesResponse
 */
export class SelectSeriesResponse extends Message<SelectSeriesResponse> {
  /**
   * @generated from field: repeated types.v1.Series series = 1;
   */
  series: Series[] = [];

  constructor(data?: PartialMessage<SelectSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.SelectSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "series", kind: "message", T: Series, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectSeriesResponse {
    return new SelectSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectSeriesResponse {
    return new SelectSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectSeriesResponse {
    return new SelectSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SelectSeriesResponse | PlainMessage<SelectSeriesResponse> | undefined, b: SelectSeriesResponse | PlainMessage<SelectSeriesResponse> | undefined): boolean {
    return proto3.util.equals(SelectSeriesResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.AnalyzeQueryRequest
 */
export class AnalyzeQueryRequest extends Message<AnalyzeQueryRequest> {
  /**
   * @generated from field: int64 start = 2;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: int64 end = 3;
   */
  end = protoInt64.zero;

  /**
   * @generated from field: string query = 4;
   */
  query = "";

  constructor(data?: PartialMessage<AnalyzeQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.AnalyzeQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeQueryRequest {
    return new AnalyzeQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeQueryRequest {
    return new AnalyzeQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeQueryRequest {
    return new AnalyzeQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeQueryRequest | PlainMessage<AnalyzeQueryRequest> | undefined, b: AnalyzeQueryRequest | PlainMessage<AnalyzeQueryRequest> | undefined): boolean {
    return proto3.util.equals(AnalyzeQueryRequest, a, b);
  }
}

/**
 * @generated from message querier.v1.AnalyzeQueryResponse
 */
export class AnalyzeQueryResponse extends Message<AnalyzeQueryResponse> {
  /**
   * detailed view of what the query will require
   *
   * @generated from field: repeated querier.v1.QueryScope query_scopes = 1;
   */
  queryScopes: QueryScope[] = [];

  /**
   * summary of the query impact / performance
   *
   * @generated from field: querier.v1.QueryImpact query_impact = 2;
   */
  queryImpact?: QueryImpact;

  constructor(data?: PartialMessage<AnalyzeQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.AnalyzeQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_scopes", kind: "message", T: QueryScope, repeated: true },
    { no: 2, name: "query_impact", kind: "message", T: QueryImpact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeQueryResponse {
    return new AnalyzeQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeQueryResponse {
    return new AnalyzeQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeQueryResponse {
    return new AnalyzeQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeQueryResponse | PlainMessage<AnalyzeQueryResponse> | undefined, b: AnalyzeQueryResponse | PlainMessage<AnalyzeQueryResponse> | undefined): boolean {
    return proto3.util.equals(AnalyzeQueryResponse, a, b);
  }
}

/**
 * @generated from message querier.v1.QueryScope
 */
export class QueryScope extends Message<QueryScope> {
  /**
   * a descriptive high level name of the component processing one part of the query (e.g., "short term storage")
   *
   * @generated from field: string component_type = 1;
   */
  componentType = "";

  /**
   * how many components of this type will process the query (indicator of read-path replication)
   *
   * @generated from field: uint64 component_count = 2;
   */
  componentCount = protoInt64.zero;

  /**
   * @generated from field: uint64 block_count = 3;
   */
  blockCount = protoInt64.zero;

  /**
   * @generated from field: uint64 series_count = 4;
   */
  seriesCount = protoInt64.zero;

  /**
   * @generated from field: uint64 profile_count = 5;
   */
  profileCount = protoInt64.zero;

  /**
   * @generated from field: uint64 sample_count = 6;
   */
  sampleCount = protoInt64.zero;

  /**
   * @generated from field: uint64 index_bytes = 7;
   */
  indexBytes = protoInt64.zero;

  /**
   * @generated from field: uint64 profile_bytes = 8;
   */
  profileBytes = protoInt64.zero;

  /**
   * @generated from field: uint64 symbol_bytes = 9;
   */
  symbolBytes = protoInt64.zero;

  constructor(data?: PartialMessage<QueryScope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.QueryScope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "component_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "component_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "block_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "series_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "profile_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "sample_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "index_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "profile_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "symbol_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryScope {
    return new QueryScope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryScope {
    return new QueryScope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryScope {
    return new QueryScope().fromJsonString(jsonString, options);
  }

  static equals(a: QueryScope | PlainMessage<QueryScope> | undefined, b: QueryScope | PlainMessage<QueryScope> | undefined): boolean {
    return proto3.util.equals(QueryScope, a, b);
  }
}

/**
 * @generated from message querier.v1.QueryImpact
 */
export class QueryImpact extends Message<QueryImpact> {
  /**
   * @generated from field: uint64 total_bytes_in_time_range = 2;
   */
  totalBytesInTimeRange = protoInt64.zero;

  /**
   * @generated from field: uint64 total_queried_series = 3;
   */
  totalQueriedSeries = protoInt64.zero;

  /**
   * @generated from field: bool deduplication_needed = 4;
   */
  deduplicationNeeded = false;

  constructor(data?: PartialMessage<QueryImpact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.v1.QueryImpact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "total_bytes_in_time_range", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_queried_series", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "deduplication_needed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryImpact {
    return new QueryImpact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryImpact {
    return new QueryImpact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryImpact {
    return new QueryImpact().fromJsonString(jsonString, options);
  }

  static equals(a: QueryImpact | PlainMessage<QueryImpact> | undefined, b: QueryImpact | PlainMessage<QueryImpact> | undefined): boolean {
    return proto3.util.equals(QueryImpact, a, b);
  }
}

