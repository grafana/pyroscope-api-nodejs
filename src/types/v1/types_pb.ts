// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file types/v1/types.proto (package types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum types.v1.TimeSeriesAggregationType
 */
export enum TimeSeriesAggregationType {
  /**
   * @generated from enum value: TIME_SERIES_AGGREGATION_TYPE_SUM = 0;
   */
  SUM = 0,

  /**
   * @generated from enum value: TIME_SERIES_AGGREGATION_TYPE_AVERAGE = 1;
   */
  AVERAGE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TimeSeriesAggregationType)
proto3.util.setEnumType(TimeSeriesAggregationType, "types.v1.TimeSeriesAggregationType", [
  { no: 0, name: "TIME_SERIES_AGGREGATION_TYPE_SUM" },
  { no: 1, name: "TIME_SERIES_AGGREGATION_TYPE_AVERAGE" },
]);

/**
 * @generated from message types.v1.LabelPair
 */
export class LabelPair extends Message<LabelPair> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<LabelPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.LabelPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelPair {
    return new LabelPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelPair {
    return new LabelPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelPair {
    return new LabelPair().fromJsonString(jsonString, options);
  }

  static equals(a: LabelPair | PlainMessage<LabelPair> | undefined, b: LabelPair | PlainMessage<LabelPair> | undefined): boolean {
    return proto3.util.equals(LabelPair, a, b);
  }
}

/**
 * @generated from message types.v1.ProfileType
 */
export class ProfileType extends Message<ProfileType> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string sample_type = 4;
   */
  sampleType = "";

  /**
   * @generated from field: string sample_unit = 5;
   */
  sampleUnit = "";

  /**
   * @generated from field: string period_type = 6;
   */
  periodType = "";

  /**
   * @generated from field: string period_unit = 7;
   */
  periodUnit = "";

  constructor(data?: PartialMessage<ProfileType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.ProfileType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sample_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sample_unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "period_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "period_unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileType {
    return new ProfileType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileType {
    return new ProfileType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileType {
    return new ProfileType().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileType | PlainMessage<ProfileType> | undefined, b: ProfileType | PlainMessage<ProfileType> | undefined): boolean {
    return proto3.util.equals(ProfileType, a, b);
  }
}

/**
 * @generated from message types.v1.Labels
 */
export class Labels extends Message<Labels> {
  /**
   * LabelPair is the key value pairs to identify the corresponding profile
   *
   * @generated from field: repeated types.v1.LabelPair labels = 1;
   */
  labels: LabelPair[] = [];

  constructor(data?: PartialMessage<Labels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Labels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: LabelPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Labels {
    return new Labels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Labels {
    return new Labels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Labels {
    return new Labels().fromJsonString(jsonString, options);
  }

  static equals(a: Labels | PlainMessage<Labels> | undefined, b: Labels | PlainMessage<Labels> | undefined): boolean {
    return proto3.util.equals(Labels, a, b);
  }
}

/**
 * @generated from message types.v1.Series
 */
export class Series extends Message<Series> {
  /**
   * @generated from field: repeated types.v1.LabelPair labels = 1;
   */
  labels: LabelPair[] = [];

  /**
   * @generated from field: repeated types.v1.Point points = 2;
   */
  points: Point[] = [];

  constructor(data?: PartialMessage<Series>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Series";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: LabelPair, repeated: true },
    { no: 2, name: "points", kind: "message", T: Point, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Series {
    return new Series().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJsonString(jsonString, options);
  }

  static equals(a: Series | PlainMessage<Series> | undefined, b: Series | PlainMessage<Series> | undefined): boolean {
    return proto3.util.equals(Series, a, b);
  }
}

/**
 * @generated from message types.v1.Point
 */
export class Point extends Message<Point> {
  /**
   * @generated from field: double value = 1;
   */
  value = 0;

  /**
   * Milliseconds unix timestamp
   *
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<Point>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Point";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Point {
    return new Point().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJsonString(jsonString, options);
  }

  static equals(a: Point | PlainMessage<Point> | undefined, b: Point | PlainMessage<Point> | undefined): boolean {
    return proto3.util.equals(Point, a, b);
  }
}

/**
 * @generated from message types.v1.LabelValuesRequest
 */
export class LabelValuesRequest extends Message<LabelValuesRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string matchers = 2;
   */
  matchers: string[] = [];

  /**
   * @generated from field: int64 start = 3;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: int64 end = 4;
   */
  end = protoInt64.zero;

  constructor(data?: PartialMessage<LabelValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.LabelValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelValuesRequest {
    return new LabelValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelValuesRequest {
    return new LabelValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelValuesRequest {
    return new LabelValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LabelValuesRequest | PlainMessage<LabelValuesRequest> | undefined, b: LabelValuesRequest | PlainMessage<LabelValuesRequest> | undefined): boolean {
    return proto3.util.equals(LabelValuesRequest, a, b);
  }
}

/**
 * @generated from message types.v1.LabelValuesResponse
 */
export class LabelValuesResponse extends Message<LabelValuesResponse> {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[] = [];

  constructor(data?: PartialMessage<LabelValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.LabelValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelValuesResponse {
    return new LabelValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelValuesResponse {
    return new LabelValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelValuesResponse {
    return new LabelValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LabelValuesResponse | PlainMessage<LabelValuesResponse> | undefined, b: LabelValuesResponse | PlainMessage<LabelValuesResponse> | undefined): boolean {
    return proto3.util.equals(LabelValuesResponse, a, b);
  }
}

/**
 * @generated from message types.v1.LabelNamesRequest
 */
export class LabelNamesRequest extends Message<LabelNamesRequest> {
  /**
   * @generated from field: repeated string matchers = 1;
   */
  matchers: string[] = [];

  /**
   * @generated from field: int64 start = 2;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: int64 end = 3;
   */
  end = protoInt64.zero;

  constructor(data?: PartialMessage<LabelNamesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.LabelNamesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelNamesRequest {
    return new LabelNamesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelNamesRequest {
    return new LabelNamesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelNamesRequest {
    return new LabelNamesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LabelNamesRequest | PlainMessage<LabelNamesRequest> | undefined, b: LabelNamesRequest | PlainMessage<LabelNamesRequest> | undefined): boolean {
    return proto3.util.equals(LabelNamesRequest, a, b);
  }
}

/**
 * @generated from message types.v1.LabelNamesResponse
 */
export class LabelNamesResponse extends Message<LabelNamesResponse> {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[] = [];

  constructor(data?: PartialMessage<LabelNamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.LabelNamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelNamesResponse {
    return new LabelNamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelNamesResponse {
    return new LabelNamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelNamesResponse {
    return new LabelNamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LabelNamesResponse | PlainMessage<LabelNamesResponse> | undefined, b: LabelNamesResponse | PlainMessage<LabelNamesResponse> | undefined): boolean {
    return proto3.util.equals(LabelNamesResponse, a, b);
  }
}

/**
 * @generated from message types.v1.BlockInfo
 */
export class BlockInfo extends Message<BlockInfo> {
  /**
   * @generated from field: string ulid = 1;
   */
  ulid = "";

  /**
   * @generated from field: int64 min_time = 2;
   */
  minTime = protoInt64.zero;

  /**
   * @generated from field: int64 max_time = 3;
   */
  maxTime = protoInt64.zero;

  /**
   * @generated from field: types.v1.BlockCompaction compaction = 4;
   */
  compaction?: BlockCompaction;

  /**
   * @generated from field: repeated types.v1.LabelPair labels = 5;
   */
  labels: LabelPair[] = [];

  constructor(data?: PartialMessage<BlockInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.BlockInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ulid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "max_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "compaction", kind: "message", T: BlockCompaction },
    { no: 5, name: "labels", kind: "message", T: LabelPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockInfo {
    return new BlockInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockInfo {
    return new BlockInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockInfo {
    return new BlockInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BlockInfo | PlainMessage<BlockInfo> | undefined, b: BlockInfo | PlainMessage<BlockInfo> | undefined): boolean {
    return proto3.util.equals(BlockInfo, a, b);
  }
}

/**
 * @generated from message types.v1.BlockCompaction
 */
export class BlockCompaction extends Message<BlockCompaction> {
  /**
   * @generated from field: int32 level = 1;
   */
  level = 0;

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  /**
   * @generated from field: repeated string parents = 3;
   */
  parents: string[] = [];

  constructor(data?: PartialMessage<BlockCompaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.BlockCompaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "parents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockCompaction {
    return new BlockCompaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockCompaction {
    return new BlockCompaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockCompaction {
    return new BlockCompaction().fromJsonString(jsonString, options);
  }

  static equals(a: BlockCompaction | PlainMessage<BlockCompaction> | undefined, b: BlockCompaction | PlainMessage<BlockCompaction> | undefined): boolean {
    return proto3.util.equals(BlockCompaction, a, b);
  }
}

/**
 * StackTraceSelector is used for filtering stack traces by locations.
 *
 * @generated from message types.v1.StackTraceSelector
 */
export class StackTraceSelector extends Message<StackTraceSelector> {
  /**
   * Stack trace of the call site. Root at call_site[0].
   * Only stack traces having the prefix provided will be selected.
   * If empty, the filter is ignored.
   *
   * @generated from field: repeated types.v1.Location call_site = 1;
   */
  callSite: Location[] = [];

  /**
   * Stack trace selector for profiles purposed for Go PGO.
   * If set, call_site is ignored.
   *
   * @generated from field: types.v1.GoPGO go_pgo = 2;
   */
  goPgo?: GoPGO;

  constructor(data?: PartialMessage<StackTraceSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.StackTraceSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_site", kind: "message", T: Location, repeated: true },
    { no: 2, name: "go_pgo", kind: "message", T: GoPGO },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StackTraceSelector {
    return new StackTraceSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StackTraceSelector {
    return new StackTraceSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StackTraceSelector {
    return new StackTraceSelector().fromJsonString(jsonString, options);
  }

  static equals(a: StackTraceSelector | PlainMessage<StackTraceSelector> | undefined, b: StackTraceSelector | PlainMessage<StackTraceSelector> | undefined): boolean {
    return proto3.util.equals(StackTraceSelector, a, b);
  }
}

/**
 * @generated from message types.v1.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message types.v1.GoPGO
 */
export class GoPGO extends Message<GoPGO> {
  /**
   * Specifies the number of leaf locations to keep.
   *
   * @generated from field: uint32 keep_locations = 1;
   */
  keepLocations = 0;

  /**
   * Aggregate callees causes the leaf location line number to be ignored,
   * thus aggregating all callee samples (but not callers).
   *
   * @generated from field: bool aggregate_callees = 2;
   */
  aggregateCallees = false;

  constructor(data?: PartialMessage<GoPGO>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.GoPGO";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keep_locations", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "aggregate_callees", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoPGO {
    return new GoPGO().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoPGO {
    return new GoPGO().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoPGO {
    return new GoPGO().fromJsonString(jsonString, options);
  }

  static equals(a: GoPGO | PlainMessage<GoPGO> | undefined, b: GoPGO | PlainMessage<GoPGO> | undefined): boolean {
    return proto3.util.equals(GoPGO, a, b);
  }
}

/**
 * @generated from message types.v1.GetProfileStatsRequest
 */
export class GetProfileStatsRequest extends Message<GetProfileStatsRequest> {
  constructor(data?: PartialMessage<GetProfileStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.GetProfileStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileStatsRequest {
    return new GetProfileStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileStatsRequest {
    return new GetProfileStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileStatsRequest {
    return new GetProfileStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileStatsRequest | PlainMessage<GetProfileStatsRequest> | undefined, b: GetProfileStatsRequest | PlainMessage<GetProfileStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileStatsRequest, a, b);
  }
}

/**
 * @generated from message types.v1.GetProfileStatsResponse
 */
export class GetProfileStatsResponse extends Message<GetProfileStatsResponse> {
  /**
   * Whether we received any data at any time in the past.
   *
   * @generated from field: bool data_ingested = 1;
   */
  dataIngested = false;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 oldest_profile_time = 2;
   */
  oldestProfileTime = protoInt64.zero;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 newest_profile_time = 3;
   */
  newestProfileTime = protoInt64.zero;

  constructor(data?: PartialMessage<GetProfileStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.GetProfileStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ingested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "oldest_profile_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "newest_profile_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileStatsResponse {
    return new GetProfileStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileStatsResponse {
    return new GetProfileStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileStatsResponse {
    return new GetProfileStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileStatsResponse | PlainMessage<GetProfileStatsResponse> | undefined, b: GetProfileStatsResponse | PlainMessage<GetProfileStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetProfileStatsResponse, a, b);
  }
}

