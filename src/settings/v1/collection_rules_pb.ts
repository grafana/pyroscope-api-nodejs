// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file settings/v1/collection_rules.proto (package settings.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message settings.v1.ServiceData
 */
export class ServiceData extends Message<ServiceData> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false;

  constructor(data?: PartialMessage<ServiceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.ServiceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceData {
    return new ServiceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceData {
    return new ServiceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceData {
    return new ServiceData().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceData | PlainMessage<ServiceData> | undefined, b: ServiceData | PlainMessage<ServiceData> | undefined): boolean {
    return proto3.util.equals(ServiceData, a, b);
  }
}

/**
 * @generated from message settings.v1.JavaSettings
 */
export class JavaSettings extends Message<JavaSettings> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<JavaSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.JavaSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JavaSettings {
    return new JavaSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JavaSettings {
    return new JavaSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JavaSettings {
    return new JavaSettings().fromJsonString(jsonString, options);
  }

  static equals(a: JavaSettings | PlainMessage<JavaSettings> | undefined, b: JavaSettings | PlainMessage<JavaSettings> | undefined): boolean {
    return proto3.util.equals(JavaSettings, a, b);
  }
}

/**
 * @generated from message settings.v1.EBPFSettings
 */
export class EBPFSettings extends Message<EBPFSettings> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<EBPFSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.EBPFSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EBPFSettings {
    return new EBPFSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EBPFSettings {
    return new EBPFSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EBPFSettings {
    return new EBPFSettings().fromJsonString(jsonString, options);
  }

  static equals(a: EBPFSettings | PlainMessage<EBPFSettings> | undefined, b: EBPFSettings | PlainMessage<EBPFSettings> | undefined): boolean {
    return proto3.util.equals(EBPFSettings, a, b);
  }
}

/**
 * UpsertCollectionRuleRequest is used to create / update a collection rule.
 *
 * @generated from message settings.v1.UpsertCollectionRuleRequest
 */
export class UpsertCollectionRuleRequest extends Message<UpsertCollectionRuleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated settings.v1.ServiceData services = 2;
   */
  services: ServiceData[] = [];

  /**
   * @generated from field: optional settings.v1.EBPFSettings ebpf = 3;
   */
  ebpf?: EBPFSettings;

  /**
   * @generated from field: optional settings.v1.JavaSettings java = 4;
   */
  java?: JavaSettings;

  /**
   * this is observed_generation of the existing object. Can be used to avoid update conflicts
   *
   * @generated from field: optional int64 observed_generation = 6;
   */
  observedGeneration?: bigint;

  constructor(data?: PartialMessage<UpsertCollectionRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.UpsertCollectionRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "services", kind: "message", T: ServiceData, repeated: true },
    { no: 3, name: "ebpf", kind: "message", T: EBPFSettings, opt: true },
    { no: 4, name: "java", kind: "message", T: JavaSettings, opt: true },
    { no: 6, name: "observed_generation", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertCollectionRuleRequest {
    return new UpsertCollectionRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertCollectionRuleRequest {
    return new UpsertCollectionRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertCollectionRuleRequest {
    return new UpsertCollectionRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertCollectionRuleRequest | PlainMessage<UpsertCollectionRuleRequest> | undefined, b: UpsertCollectionRuleRequest | PlainMessage<UpsertCollectionRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpsertCollectionRuleRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.GetCollectionRuleRequest
 */
export class GetCollectionRuleRequest extends Message<GetCollectionRuleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetCollectionRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.GetCollectionRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCollectionRuleRequest {
    return new GetCollectionRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCollectionRuleRequest {
    return new GetCollectionRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCollectionRuleRequest {
    return new GetCollectionRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCollectionRuleRequest | PlainMessage<GetCollectionRuleRequest> | undefined, b: GetCollectionRuleRequest | PlainMessage<GetCollectionRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetCollectionRuleRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.GetCollectionRuleResponse
 */
export class GetCollectionRuleResponse extends Message<GetCollectionRuleResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated settings.v1.ServiceData services = 2;
   */
  services: ServiceData[] = [];

  /**
   * @generated from field: optional settings.v1.EBPFSettings ebpf = 3;
   */
  ebpf?: EBPFSettings;

  /**
   * @generated from field: optional settings.v1.JavaSettings java = 4;
   */
  java?: JavaSettings;

  /**
   * milliseconds unix time of last update
   *
   * @generated from field: int64 last_updated = 5;
   */
  lastUpdated = protoInt64.zero;

  /**
   *  incremented on each update
   *
   * @generated from field: int64 generation = 6;
   */
  generation = protoInt64.zero;

  /**
   * generated configuration block in alloy syntax
   *
   * @generated from field: string configuration = 7;
   */
  configuration = "";

  constructor(data?: PartialMessage<GetCollectionRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.GetCollectionRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "services", kind: "message", T: ServiceData, repeated: true },
    { no: 3, name: "ebpf", kind: "message", T: EBPFSettings, opt: true },
    { no: 4, name: "java", kind: "message", T: JavaSettings, opt: true },
    { no: 5, name: "last_updated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "configuration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCollectionRuleResponse {
    return new GetCollectionRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCollectionRuleResponse {
    return new GetCollectionRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCollectionRuleResponse {
    return new GetCollectionRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCollectionRuleResponse | PlainMessage<GetCollectionRuleResponse> | undefined, b: GetCollectionRuleResponse | PlainMessage<GetCollectionRuleResponse> | undefined): boolean {
    return proto3.util.equals(GetCollectionRuleResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.ListCollectionRulesRequest
 */
export class ListCollectionRulesRequest extends Message<ListCollectionRulesRequest> {
  constructor(data?: PartialMessage<ListCollectionRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.ListCollectionRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCollectionRulesRequest {
    return new ListCollectionRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCollectionRulesRequest {
    return new ListCollectionRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCollectionRulesRequest {
    return new ListCollectionRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCollectionRulesRequest | PlainMessage<ListCollectionRulesRequest> | undefined, b: ListCollectionRulesRequest | PlainMessage<ListCollectionRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListCollectionRulesRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.ListCollectionRulesResponse
 */
export class ListCollectionRulesResponse extends Message<ListCollectionRulesResponse> {
  /**
   * @generated from field: repeated settings.v1.GetCollectionRuleResponse rules = 1;
   */
  rules: GetCollectionRuleResponse[] = [];

  /**
   *  incremented on each update
   *
   * @generated from field: int64 generation = 2;
   */
  generation = protoInt64.zero;

  constructor(data?: PartialMessage<ListCollectionRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.ListCollectionRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: GetCollectionRuleResponse, repeated: true },
    { no: 2, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCollectionRulesResponse {
    return new ListCollectionRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCollectionRulesResponse {
    return new ListCollectionRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCollectionRulesResponse {
    return new ListCollectionRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCollectionRulesResponse | PlainMessage<ListCollectionRulesResponse> | undefined, b: ListCollectionRulesResponse | PlainMessage<ListCollectionRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListCollectionRulesResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.DeleteCollectionRuleRequest
 */
export class DeleteCollectionRuleRequest extends Message<DeleteCollectionRuleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteCollectionRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.DeleteCollectionRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCollectionRuleRequest {
    return new DeleteCollectionRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCollectionRuleRequest {
    return new DeleteCollectionRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCollectionRuleRequest {
    return new DeleteCollectionRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCollectionRuleRequest | PlainMessage<DeleteCollectionRuleRequest> | undefined, b: DeleteCollectionRuleRequest | PlainMessage<DeleteCollectionRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCollectionRuleRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.DeleteCollectionRuleResponse
 */
export class DeleteCollectionRuleResponse extends Message<DeleteCollectionRuleResponse> {
  constructor(data?: PartialMessage<DeleteCollectionRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.DeleteCollectionRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCollectionRuleResponse {
    return new DeleteCollectionRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCollectionRuleResponse {
    return new DeleteCollectionRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCollectionRuleResponse {
    return new DeleteCollectionRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCollectionRuleResponse | PlainMessage<DeleteCollectionRuleResponse> | undefined, b: DeleteCollectionRuleResponse | PlainMessage<DeleteCollectionRuleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCollectionRuleResponse, a, b);
  }
}

/**
 * CollectionRuleStore is how the message gets stored in object store
 *
 * @generated from message settings.v1.CollectionRuleStore
 */
export class CollectionRuleStore extends Message<CollectionRuleStore> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated settings.v1.ServiceData services = 2;
   */
  services: ServiceData[] = [];

  /**
   * @generated from field: settings.v1.EBPFSettings ebpf = 3;
   */
  ebpf?: EBPFSettings;

  /**
   * @generated from field: settings.v1.JavaSettings java = 4;
   */
  java?: JavaSettings;

  /**
   * milliseconds unix time
   *
   * @generated from field: int64 last_updated = 5;
   */
  lastUpdated = protoInt64.zero;

  /**
   * milliseconds unix time
   *
   * @generated from field: int64 generation = 6;
   */
  generation = protoInt64.zero;

  constructor(data?: PartialMessage<CollectionRuleStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.CollectionRuleStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "services", kind: "message", T: ServiceData, repeated: true },
    { no: 3, name: "ebpf", kind: "message", T: EBPFSettings },
    { no: 4, name: "java", kind: "message", T: JavaSettings },
    { no: 5, name: "last_updated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionRuleStore {
    return new CollectionRuleStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionRuleStore {
    return new CollectionRuleStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionRuleStore {
    return new CollectionRuleStore().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionRuleStore | PlainMessage<CollectionRuleStore> | undefined, b: CollectionRuleStore | PlainMessage<CollectionRuleStore> | undefined): boolean {
    return proto3.util.equals(CollectionRuleStore, a, b);
  }
}

