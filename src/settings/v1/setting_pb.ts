// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file settings/v1/setting.proto (package settings.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message settings.v1.GetSettingsRequest
 */
export class GetSettingsRequest extends Message<GetSettingsRequest> {
  constructor(data?: PartialMessage<GetSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.GetSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSettingsRequest | PlainMessage<GetSettingsRequest> | undefined, b: GetSettingsRequest | PlainMessage<GetSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetSettingsRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.GetSettingsResponse
 */
export class GetSettingsResponse extends Message<GetSettingsResponse> {
  /**
   * @generated from field: repeated settings.v1.Setting settings = 1;
   */
  settings: Setting[] = [];

  constructor(data?: PartialMessage<GetSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.GetSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: Setting, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSettingsResponse | PlainMessage<GetSettingsResponse> | undefined, b: GetSettingsResponse | PlainMessage<GetSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetSettingsResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.SetSettingsRequest
 */
export class SetSettingsRequest extends Message<SetSettingsRequest> {
  /**
   * @generated from field: settings.v1.Setting setting = 1;
   */
  setting?: Setting;

  constructor(data?: PartialMessage<SetSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.SetSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setting", kind: "message", T: Setting },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSettingsRequest {
    return new SetSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSettingsRequest {
    return new SetSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSettingsRequest {
    return new SetSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSettingsRequest | PlainMessage<SetSettingsRequest> | undefined, b: SetSettingsRequest | PlainMessage<SetSettingsRequest> | undefined): boolean {
    return proto3.util.equals(SetSettingsRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.SetSettingsResponse
 */
export class SetSettingsResponse extends Message<SetSettingsResponse> {
  /**
   * @generated from field: settings.v1.Setting setting = 1;
   */
  setting?: Setting;

  constructor(data?: PartialMessage<SetSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.SetSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setting", kind: "message", T: Setting },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSettingsResponse {
    return new SetSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSettingsResponse {
    return new SetSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSettingsResponse {
    return new SetSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSettingsResponse | PlainMessage<SetSettingsResponse> | undefined, b: SetSettingsResponse | PlainMessage<SetSettingsResponse> | undefined): boolean {
    return proto3.util.equals(SetSettingsResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.DeleteSettingsRequest
 */
export class DeleteSettingsRequest extends Message<DeleteSettingsRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.DeleteSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSettingsRequest {
    return new DeleteSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSettingsRequest {
    return new DeleteSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSettingsRequest {
    return new DeleteSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSettingsRequest | PlainMessage<DeleteSettingsRequest> | undefined, b: DeleteSettingsRequest | PlainMessage<DeleteSettingsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSettingsRequest, a, b);
  }
}

/**
 * @generated from message settings.v1.DeleteSettingsResponse
 */
export class DeleteSettingsResponse extends Message<DeleteSettingsResponse> {
  constructor(data?: PartialMessage<DeleteSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.DeleteSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSettingsResponse {
    return new DeleteSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSettingsResponse {
    return new DeleteSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSettingsResponse {
    return new DeleteSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSettingsResponse | PlainMessage<DeleteSettingsResponse> | undefined, b: DeleteSettingsResponse | PlainMessage<DeleteSettingsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSettingsResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.Setting
 */
export class Setting extends Message<Setting> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: int64 modifiedAt = 3;
   */
  modifiedAt = protoInt64.zero;

  constructor(data?: PartialMessage<Setting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.Setting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "modifiedAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Setting {
    return new Setting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Setting {
    return new Setting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Setting {
    return new Setting().fromJsonString(jsonString, options);
  }

  static equals(a: Setting | PlainMessage<Setting> | undefined, b: Setting | PlainMessage<Setting> | undefined): boolean {
    return proto3.util.equals(Setting, a, b);
  }
}

