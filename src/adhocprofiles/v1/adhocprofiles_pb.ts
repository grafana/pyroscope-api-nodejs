// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file adhocprofiles/v1/adhocprofiles.proto (package adhocprofiles.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesUploadRequest
 */
export class AdHocProfilesUploadRequest extends Message<AdHocProfilesUploadRequest> {
  /**
   * This is typically the file name and it serves as a human readable name for the profile.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * This is the profile encoded in base64. The supported formats are pprof, json, collapsed and perf-script.
   *
   * @generated from field: string profile = 2;
   */
  profile = "";

  /**
   * Max nodes can be used to truncate the response.
   *
   * @generated from field: optional int64 max_nodes = 3;
   */
  maxNodes?: bigint;

  constructor(data?: PartialMessage<AdHocProfilesUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesUploadRequest {
    return new AdHocProfilesUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesUploadRequest {
    return new AdHocProfilesUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesUploadRequest {
    return new AdHocProfilesUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesUploadRequest | PlainMessage<AdHocProfilesUploadRequest> | undefined, b: AdHocProfilesUploadRequest | PlainMessage<AdHocProfilesUploadRequest> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesUploadRequest, a, b);
  }
}

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesGetRequest
 */
export class AdHocProfilesGetRequest extends Message<AdHocProfilesGetRequest> {
  /**
   * The unique identifier of the profile.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The desired profile type (e.g., cpu, samples) for the returned flame graph. If omitted the first profile is returned.
   *
   * @generated from field: optional string profile_type = 2;
   */
  profileType?: string;

  /**
   * Max nodes can be used to truncate the response.
   *
   * @generated from field: optional int64 max_nodes = 3;
   */
  maxNodes?: bigint;

  constructor(data?: PartialMessage<AdHocProfilesGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "max_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesGetRequest {
    return new AdHocProfilesGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesGetRequest {
    return new AdHocProfilesGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesGetRequest {
    return new AdHocProfilesGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesGetRequest | PlainMessage<AdHocProfilesGetRequest> | undefined, b: AdHocProfilesGetRequest | PlainMessage<AdHocProfilesGetRequest> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesGetRequest, a, b);
  }
}

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesGetResponse
 */
export class AdHocProfilesGetResponse extends Message<AdHocProfilesGetResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * timestamp in milliseconds
   *
   * @generated from field: int64 uploaded_at = 3;
   */
  uploadedAt = protoInt64.zero;

  /**
   * @generated from field: string profile_type = 4;
   */
  profileType = "";

  /**
   * Some profiles formats (like pprof) can contain multiple profile (sample) types inside. One of these can be passed
   * in the Get request using the profile_type field.
   *
   * @generated from field: repeated string profile_types = 5;
   */
  profileTypes: string[] = [];

  /**
   * @generated from field: string flamebearer_profile = 6;
   */
  flamebearerProfile = "";

  constructor(data?: PartialMessage<AdHocProfilesGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uploaded_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "profile_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "profile_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "flamebearer_profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesGetResponse {
    return new AdHocProfilesGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesGetResponse {
    return new AdHocProfilesGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesGetResponse {
    return new AdHocProfilesGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesGetResponse | PlainMessage<AdHocProfilesGetResponse> | undefined, b: AdHocProfilesGetResponse | PlainMessage<AdHocProfilesGetResponse> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesGetResponse, a, b);
  }
}

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesListRequest
 */
export class AdHocProfilesListRequest extends Message<AdHocProfilesListRequest> {
  constructor(data?: PartialMessage<AdHocProfilesListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesListRequest {
    return new AdHocProfilesListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesListRequest {
    return new AdHocProfilesListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesListRequest {
    return new AdHocProfilesListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesListRequest | PlainMessage<AdHocProfilesListRequest> | undefined, b: AdHocProfilesListRequest | PlainMessage<AdHocProfilesListRequest> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesListRequest, a, b);
  }
}

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesListResponse
 */
export class AdHocProfilesListResponse extends Message<AdHocProfilesListResponse> {
  /**
   * @generated from field: repeated adhocprofiles.v1.AdHocProfilesProfileMetadata profiles = 1;
   */
  profiles: AdHocProfilesProfileMetadata[] = [];

  constructor(data?: PartialMessage<AdHocProfilesListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profiles", kind: "message", T: AdHocProfilesProfileMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesListResponse {
    return new AdHocProfilesListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesListResponse {
    return new AdHocProfilesListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesListResponse {
    return new AdHocProfilesListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesListResponse | PlainMessage<AdHocProfilesListResponse> | undefined, b: AdHocProfilesListResponse | PlainMessage<AdHocProfilesListResponse> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesListResponse, a, b);
  }
}

/**
 * @generated from message adhocprofiles.v1.AdHocProfilesProfileMetadata
 */
export class AdHocProfilesProfileMetadata extends Message<AdHocProfilesProfileMetadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * timestamp in milliseconds
   *
   * @generated from field: int64 uploaded_at = 3;
   */
  uploadedAt = protoInt64.zero;

  constructor(data?: PartialMessage<AdHocProfilesProfileMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "adhocprofiles.v1.AdHocProfilesProfileMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uploaded_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdHocProfilesProfileMetadata {
    return new AdHocProfilesProfileMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdHocProfilesProfileMetadata {
    return new AdHocProfilesProfileMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdHocProfilesProfileMetadata {
    return new AdHocProfilesProfileMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AdHocProfilesProfileMetadata | PlainMessage<AdHocProfilesProfileMetadata> | undefined, b: AdHocProfilesProfileMetadata | PlainMessage<AdHocProfilesProfileMetadata> | undefined): boolean {
    return proto3.util.equals(AdHocProfilesProfileMetadata, a, b);
  }
}

