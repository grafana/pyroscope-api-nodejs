// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vcs/v1/vcs.proto (package vcs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message vcs.v1.GithubAppRequest
 */
export class GithubAppRequest extends Message<GithubAppRequest> {
  constructor(data?: PartialMessage<GithubAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubAppRequest {
    return new GithubAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubAppRequest {
    return new GithubAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubAppRequest {
    return new GithubAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GithubAppRequest | PlainMessage<GithubAppRequest> | undefined, b: GithubAppRequest | PlainMessage<GithubAppRequest> | undefined): boolean {
    return proto3.util.equals(GithubAppRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GithubAppResponse
 */
export class GithubAppResponse extends Message<GithubAppResponse> {
  /**
   * @generated from field: string clientID = 1;
   */
  clientID = "";

  constructor(data?: PartialMessage<GithubAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clientID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubAppResponse {
    return new GithubAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubAppResponse {
    return new GithubAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubAppResponse {
    return new GithubAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GithubAppResponse | PlainMessage<GithubAppResponse> | undefined, b: GithubAppResponse | PlainMessage<GithubAppResponse> | undefined): boolean {
    return proto3.util.equals(GithubAppResponse, a, b);
  }
}

/**
 * @generated from message vcs.v1.GithubLoginRequest
 */
export class GithubLoginRequest extends Message<GithubLoginRequest> {
  /**
   * @generated from field: string authorizationCode = 1;
   */
  authorizationCode = "";

  constructor(data?: PartialMessage<GithubLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authorizationCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubLoginRequest {
    return new GithubLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubLoginRequest {
    return new GithubLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubLoginRequest {
    return new GithubLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GithubLoginRequest | PlainMessage<GithubLoginRequest> | undefined, b: GithubLoginRequest | PlainMessage<GithubLoginRequest> | undefined): boolean {
    return proto3.util.equals(GithubLoginRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GithubLoginResponse
 */
export class GithubLoginResponse extends Message<GithubLoginResponse> {
  /**
   * Deprecated
   * In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
   * data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
   * its own cookie from the new data.
   * Remove after completing https://github.com/grafana/explore-profiles/issues/187
   *
   * @generated from field: string cookie = 1;
   */
  cookie = "";

  /**
   * base64 encoded encrypted token
   *
   * @generated from field: string token = 2;
   */
  token = "";

  /**
   * Unix ms timestamp of when the token expires.
   *
   * @generated from field: int64 token_expires_at = 3;
   */
  tokenExpiresAt = protoInt64.zero;

  /**
   * Unix ms timestamp of when the refresh token expires.
   *
   * @generated from field: int64 refresh_token_expires_at = 4;
   */
  refreshTokenExpiresAt = protoInt64.zero;

  constructor(data?: PartialMessage<GithubLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cookie", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "refresh_token_expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubLoginResponse {
    return new GithubLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubLoginResponse {
    return new GithubLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubLoginResponse {
    return new GithubLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GithubLoginResponse | PlainMessage<GithubLoginResponse> | undefined, b: GithubLoginResponse | PlainMessage<GithubLoginResponse> | undefined): boolean {
    return proto3.util.equals(GithubLoginResponse, a, b);
  }
}

/**
 * @generated from message vcs.v1.GithubRefreshRequest
 */
export class GithubRefreshRequest extends Message<GithubRefreshRequest> {
  constructor(data?: PartialMessage<GithubRefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubRefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubRefreshRequest {
    return new GithubRefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubRefreshRequest {
    return new GithubRefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubRefreshRequest {
    return new GithubRefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GithubRefreshRequest | PlainMessage<GithubRefreshRequest> | undefined, b: GithubRefreshRequest | PlainMessage<GithubRefreshRequest> | undefined): boolean {
    return proto3.util.equals(GithubRefreshRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GithubRefreshResponse
 */
export class GithubRefreshResponse extends Message<GithubRefreshResponse> {
  /**
   * Deprecated
   * In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
   * data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
   * its own cookie from the new data.
   * Remove after completing https://github.com/grafana/explore-profiles/issues/187
   *
   * @generated from field: string cookie = 1;
   */
  cookie = "";

  /**
   * base64 encoded encrypted token
   *
   * @generated from field: string token = 2;
   */
  token = "";

  /**
   * Unix ms timestamp of when the token expires.
   *
   * @generated from field: int64 token_expires_at = 3;
   */
  tokenExpiresAt = protoInt64.zero;

  /**
   * Unix ms timestamp of when the refresh token expires.
   *
   * @generated from field: int64 refresh_token_expires_at = 4;
   */
  refreshTokenExpiresAt = protoInt64.zero;

  constructor(data?: PartialMessage<GithubRefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GithubRefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cookie", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "refresh_token_expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubRefreshResponse {
    return new GithubRefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubRefreshResponse {
    return new GithubRefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubRefreshResponse {
    return new GithubRefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GithubRefreshResponse | PlainMessage<GithubRefreshResponse> | undefined, b: GithubRefreshResponse | PlainMessage<GithubRefreshResponse> | undefined): boolean {
    return proto3.util.equals(GithubRefreshResponse, a, b);
  }
}

/**
 * @generated from message vcs.v1.GetFileRequest
 */
export class GetFileRequest extends Message<GetFileRequest> {
  /**
   * the full path to the repository
   *
   * @generated from field: string repositoryURL = 1;
   */
  repositoryURL = "";

  /**
   * the vcs ref to get the file from
   *
   * @generated from field: string ref = 2;
   */
  ref = "";

  /**
   * the path to the file as provided by the symbols
   *
   * @generated from field: string localPath = 3;
   */
  localPath = "";

  /**
   * the root path where the project lives inside the repository
   *
   * @generated from field: string rootPath = 4;
   */
  rootPath = "";

  constructor(data?: PartialMessage<GetFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositoryURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "localPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rootPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileRequest {
    return new GetFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileRequest | PlainMessage<GetFileRequest> | undefined, b: GetFileRequest | PlainMessage<GetFileRequest> | undefined): boolean {
    return proto3.util.equals(GetFileRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GetFileResponse
 */
export class GetFileResponse extends Message<GetFileResponse> {
  /**
   * base64 content of the file
   *
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * the full URL to the file
   *
   * @generated from field: string URL = 2;
   */
  URL = "";

  constructor(data?: PartialMessage<GetFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "URL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileResponse {
    return new GetFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileResponse | PlainMessage<GetFileResponse> | undefined, b: GetFileResponse | PlainMessage<GetFileResponse> | undefined): boolean {
    return proto3.util.equals(GetFileResponse, a, b);
  }
}

/**
 * @generated from message vcs.v1.GetCommitRequest
 */
export class GetCommitRequest extends Message<GetCommitRequest> {
  /**
   * the full path to the repository
   *
   * @generated from field: string repositoryURL = 1;
   */
  repositoryURL = "";

  /**
   * the vcs ref to get the file from
   *
   * @generated from field: string ref = 2;
   */
  ref = "";

  constructor(data?: PartialMessage<GetCommitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetCommitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositoryURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommitRequest {
    return new GetCommitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommitRequest {
    return new GetCommitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommitRequest {
    return new GetCommitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommitRequest | PlainMessage<GetCommitRequest> | undefined, b: GetCommitRequest | PlainMessage<GetCommitRequest> | undefined): boolean {
    return proto3.util.equals(GetCommitRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GetCommitResponse
 */
export class GetCommitResponse extends Message<GetCommitResponse> {
  /**
   * the commit message
   *
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * the commit author login
   *
   * @generated from field: vcs.v1.CommitAuthor author = 2;
   */
  author?: CommitAuthor;

  /**
   * the commit date
   *
   * @generated from field: string date = 3;
   */
  date = "";

  /**
   * the commit sha
   *
   * @generated from field: string sha = 4;
   */
  sha = "";

  /**
   * the full URL to the commit
   *
   * @generated from field: string URL = 5;
   */
  URL = "";

  constructor(data?: PartialMessage<GetCommitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetCommitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "message", T: CommitAuthor },
    { no: 3, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "URL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommitResponse {
    return new GetCommitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommitResponse {
    return new GetCommitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommitResponse {
    return new GetCommitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommitResponse | PlainMessage<GetCommitResponse> | undefined, b: GetCommitResponse | PlainMessage<GetCommitResponse> | undefined): boolean {
    return proto3.util.equals(GetCommitResponse, a, b);
  }
}

/**
 * @generated from message vcs.v1.CommitAuthor
 */
export class CommitAuthor extends Message<CommitAuthor> {
  /**
   * the author login
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * the author avatar URL
   *
   * @generated from field: string avatarURL = 2;
   */
  avatarURL = "";

  constructor(data?: PartialMessage<CommitAuthor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.CommitAuthor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "avatarURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitAuthor {
    return new CommitAuthor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitAuthor {
    return new CommitAuthor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitAuthor {
    return new CommitAuthor().fromJsonString(jsonString, options);
  }

  static equals(a: CommitAuthor | PlainMessage<CommitAuthor> | undefined, b: CommitAuthor | PlainMessage<CommitAuthor> | undefined): boolean {
    return proto3.util.equals(CommitAuthor, a, b);
  }
}

/**
 * @generated from message vcs.v1.CommitInfo
 */
export class CommitInfo extends Message<CommitInfo> {
  /**
   * the commit message
   *
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * the commit author login
   *
   * @generated from field: vcs.v1.CommitAuthor author = 2;
   */
  author?: CommitAuthor;

  /**
   * the commit date
   *
   * @generated from field: string date = 3;
   */
  date = "";

  /**
   * the commit sha
   *
   * @generated from field: string sha = 4;
   */
  sha = "";

  /**
   * the full URL to the commit
   *
   * @generated from field: string URL = 5;
   */
  URL = "";

  constructor(data?: PartialMessage<CommitInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.CommitInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "message", T: CommitAuthor },
    { no: 3, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "URL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitInfo {
    return new CommitInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitInfo {
    return new CommitInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitInfo {
    return new CommitInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CommitInfo | PlainMessage<CommitInfo> | undefined, b: CommitInfo | PlainMessage<CommitInfo> | undefined): boolean {
    return proto3.util.equals(CommitInfo, a, b);
  }
}

/**
 * New messages for the GetCommits method
 *
 * @generated from message vcs.v1.GetCommitsRequest
 */
export class GetCommitsRequest extends Message<GetCommitsRequest> {
  /**
   * @generated from field: string repository_url = 1;
   */
  repositoryUrl = "";

  /**
   * @generated from field: repeated string refs = 2;
   */
  refs: string[] = [];

  constructor(data?: PartialMessage<GetCommitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetCommitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommitsRequest {
    return new GetCommitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommitsRequest {
    return new GetCommitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommitsRequest {
    return new GetCommitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommitsRequest | PlainMessage<GetCommitsRequest> | undefined, b: GetCommitsRequest | PlainMessage<GetCommitsRequest> | undefined): boolean {
    return proto3.util.equals(GetCommitsRequest, a, b);
  }
}

/**
 * @generated from message vcs.v1.GetCommitsResponse
 */
export class GetCommitsResponse extends Message<GetCommitsResponse> {
  /**
   * @generated from field: repeated vcs.v1.CommitInfo commits = 1;
   */
  commits: CommitInfo[] = [];

  constructor(data?: PartialMessage<GetCommitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcs.v1.GetCommitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commits", kind: "message", T: CommitInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommitsResponse {
    return new GetCommitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommitsResponse {
    return new GetCommitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommitsResponse {
    return new GetCommitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommitsResponse | PlainMessage<GetCommitsResponse> | undefined, b: GetCommitsResponse | PlainMessage<GetCommitsResponse> | undefined): boolean {
    return proto3.util.equals(GetCommitsResponse, a, b);
  }
}

